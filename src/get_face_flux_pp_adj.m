function face_flux_pp = get_face_flux_pp_adj(fieldM, fieldP, param)

% Return empty array if there are no pp faces

if isempty(param.pp_face_node)
    face_flux_pp = [];
    return
end

% Compute flux between adjacent poroelastic elements for adjoint solver

Globals3D;

% Extract outward normals for poroelastic-poroelastic faces

onx = nx(param.pp_face_node);
ony = ny(param.pp_face_node);
onz = nz(param.pp_face_node);

% collect interior fields

s11M  = fieldM(param.pp_face_node,1);
s22M  = fieldM(param.pp_face_node,2);
s33M  = fieldM(param.pp_face_node,3);
s12M  = fieldM(param.pp_face_node,4);
s23M  = fieldM(param.pp_face_node,5);
s13M  = fieldM(param.pp_face_node,6);
pM    = fieldM(param.pp_face_node,7);
vxM   = fieldM(param.pp_face_node,8);
vyM   = fieldM(param.pp_face_node,9);
vzM   = fieldM(param.pp_face_node,10);
vfxM  = fieldM(param.pp_face_node,11);
vfyM  = fieldM(param.pp_face_node,12);
vfzM  = fieldM(param.pp_face_node,13);

% collect exterior fields

s11P  = fieldP(param.pp_face_node,1);
s22P  = fieldP(param.pp_face_node,2);
s33P  = fieldP(param.pp_face_node,3);
s12P  = fieldP(param.pp_face_node,4);
s23P  = fieldP(param.pp_face_node,5);
s13P  = fieldP(param.pp_face_node,6);
pP    = fieldP(param.pp_face_node,7);
vxP   = fieldP(param.pp_face_node,8);
vyP   = fieldP(param.pp_face_node,9);
vzP   = fieldP(param.pp_face_node,10);
vfxP  = fieldP(param.pp_face_node,11);
vfyP  = fieldP(param.pp_face_node,12);
vfzP  = fieldP(param.pp_face_node,13);

% compute velocity terms
% ndv = n'[vxM;vyM;vzM] - n'[vxP;vyP;vzP]
ndv  = ( onx.*vxM + ony.*vyM + onz.*vzM ) - ...
       ( onx.*vxP + ony.*vyP + onz.*vzP );
% ndvf = n'[vfxM;vfyM] - n'[vfxP;vfyP]
ndvf = (onx.*vfxM + ony.*vfyM + onz.*vfzM) - ...
       (onx.*vfxP + ony.*vfyP + onz.*vfzP);

% this is n'(T^- T^+)n
% ndTn = ...
% (   2*param.mu_fr_ppM.*( ...
%   onx.*onx.*e11M + ...
%   ony.*ony.*e22M + ...
%   onz.*onz.*e33M + ...
% 2*onx.*ony.*e12M + ...
% 2*ony.*onz.*e23M + ...
% 2*onx.*onz.*e13M ...
% ) +...
% param.lambda_ppM.*(e11M+e22M+e33M) - ...
% param.alpha_ppM.*param.M_ppM.*zetaM ...
% ) ...
% - ...   
% ( 2*param.mu_fr_ppP.*( ...
%    onx.*onx.*e11P + ...
%    ony.*ony.*e22P + ...
%    onz.*onz.*e33P + ...
%  2*onx.*ony.*e12P + ...
%  2*ony.*onz.*e23P + ...
%  2*onx.*onz.*e13P   ...
% ) + ...
% param.lambda_ppP.*(e11P+e22P+e33P) - ...
% param.alpha_ppP.*param.M_ppP.*zetaP ...       
% );

ndTn = ...
(...
  onx.*onx.*s11M + ...
  ony.*ony.*s22M + ...
  onz.*onz.*s33M + ...
2*onx.*ony.*s12M + ...
2*ony.*onz.*s23M + ...
2*onx.*onz.*s13M ...
)... 
- ...   
(...
   onx.*onx.*s11P + ...
   ony.*ony.*s22P + ...
   onz.*onz.*s33P + ...
 2*onx.*ony.*s12P + ...
 2*ony.*onz.*s23P + ...
 2*onx.*onz.*s13P   ...
);

% dTf = n'[[Tf]] = n'*Tfm*n - n'Tfp*n
% ndTfn = ...
% (param.M_ppM.*(param.alpha_ppM.*(e11M+e22M+e33M)- zetaM)) ...
% - ...
% (param.M_ppP.*(param.alpha_ppP.*(e11P+e22P+e33P)- zetaP));

% sign here is important
ndTfn = - (pM - pP);

% S-wave
% Tnx = (2*param.mu_fr_ppM.*e11M + param.lambda_ppM.*(e11M+e22M+e33M) - param.alpha_ppM.*param.M_ppM.*zetaM).*onx + ...
%        2*param.mu_fr_ppM.*e12M.*ony + ...
%        2*param.mu_fr_ppM.*e13M.*onz - ...
%       (2*param.mu_fr_ppP.*e11P + param.lambda_ppP.*(e11P+e22P+e33P) - param.alpha_ppP.*param.M_ppP.*zetaP).*onx - ...
%        2*param.mu_fr_ppP.*e12P.*ony - ...
%        2*param.mu_fr_ppP.*e13P.*onz;
% 
% Tny = 2*param.mu_fr_ppM.*e12M.*onx +...
%      (2*param.mu_fr_ppM.*e22M + param.lambda_ppM.*(e11M+e22M+e33M) - param.alpha_ppM.*param.M_ppM.*zetaM).*ony +...
%       2*param.mu_fr_ppM.*e23M.*onz -...
%       2*param.mu_fr_ppP.*e12P.*onx -...
%      (2*param.mu_fr_ppP.*e22P + param.lambda_ppP.*(e11P+e22P+e33P) - param.alpha_ppP.*param.M_ppP.*zetaP).*ony -...
%       2*param.mu_fr_ppP.*e23P.*onz;
% 
% Tnz = 2*param.mu_fr_ppM.*e13M.*onx +...
%       2*param.mu_fr_ppM.*e23M.*ony +...
%      (2*param.mu_fr_ppM.*e33M + param.lambda_ppM.*(e11M+e22M+e33M) - param.alpha_ppM.*param.M_ppM.*zetaM).*onz -...
%       2*param.mu_fr_ppP.*e13P.*onx -...
%       2*param.mu_fr_ppP.*e23P.*ony -...
%      (2*param.mu_fr_ppP.*e33P + param.lambda_ppP.*(e11P+e22P+e33P) - param.alpha_ppP.*param.M_ppP.*zetaP).*onz;


Tnx =  s11M.*onx + s12M.*ony + s13M.*onz -...
      (s11P.*onx + s12P.*ony + s13P.*onz);


Tny =  s12M.*onx + s22M.*ony + s23M.*onz -...
      (s12P.*onx + s22P.*ony + s23P.*onz);

Tnz =  s13M.*onx + s23M.*ony + s33M.*onz -...
      (s13P.*onx + s23P.*ony + s33P.*onz);

% these are cross product terms nx(nx[[T]]) in \S3.5 
nnTnx = onx.*(Tny.*ony + Tnz.*onz) - Tnx.*(ony.^2 + onz.^2); 

nnTny = ony.*(Tnx.*onx + Tnz.*onz) - Tny.*(onx.^2 + onz.^2); 

nnTnz = onz.*(Tnx.*onx + Tny.*ony) - Tnz.*(onx.^2 + ony.^2);

% this is nx(nx[v_s])
nndvx =  onx.*(ony.*vyM + onz.*vzM) - vxM.*(ony.^2 + onz.^2) -...
        (onx.*(ony.*vyP + onz.*vzP) - vxP.*(ony.^2 + onz.^2));
    
nndvy =  ony.*(onx.*vxM + onz.*vzM) - vyM.*(onx.^2 + onz.^2) -...
        (ony.*(onx.*vxP + onz.*vzP) - vyP.*(onx.^2 + onz.^2));
    
nndvz =  onz.*(onx.*vxM + ony.*vyM) - vzM.*(onx.^2 + ony.^2) -...
        (onz.*(onx.*vxP + ony.*vyP) - vzP.*(onx.^2 + ony.^2));

% storage for the flux terms

face_flux_pp = zeros(numel(param.pp_face_node), param.Nfields);

% assemble S-wave flux
tmpS = -param.cs_i_ppM./(param.cs_i_ppP.*param.mu_fr_ppM + param.cs_i_ppM.*param.mu_fr_ppP);

% think i missed this out
tmp2 = 2*param.mu_fr_ppM;

face_flux_pp(:,1) = tmp2.*tmpS.*onx.*(param.cs_i_ppP.*nnTnx + param.mu_fr_ppP.*nndvx);
face_flux_pp(:,2) = tmp2.*tmpS.*ony.*(param.cs_i_ppP.*nnTny + param.mu_fr_ppP.*nndvy);
face_flux_pp(:,3) = tmp2.*tmpS.*onz.*(param.cs_i_ppP.*nnTnz + param.mu_fr_ppP.*nndvz);
face_flux_pp(:,4) = 0.5*tmp2.*tmpS.*(...
    param.cs_i_ppP .*(ony.*nnTnx + onx.*nnTny) +...
    param.mu_fr_ppP.*(ony.*nndvx + onx.*nndvy) ...
    );
face_flux_pp(:,5) = 0.5*tmp2.*tmpS.*(...
    param.cs_i_ppP .*(onz.*nnTny + ony.*nnTnz) +...
    param.mu_fr_ppP.*(onz.*nndvy + ony.*nndvz) ...
    );
face_flux_pp(:,6) = 0.5*tmp2.*tmpS.*(...
    param.cs_i_ppP .*(onz.*nnTnx + onx.*nnTnz) +...
    param.mu_fr_ppP.*(onz.*nndvx + onx.*nndvz) ...
    );
%face_flux(:,7) = 0;
face_flux_pp(:,8)  =  tmpS.*param.cs_i_ppM.*(param.cs_i_ppP.*nnTnx + param.mu_fr_ppP.*nndvx);
face_flux_pp(:,9)  =  tmpS.*param.cs_i_ppM.*(param.cs_i_ppP.*nnTny + param.mu_fr_ppP.*nndvy);
face_flux_pp(:,10) =  tmpS.*param.cs_i_ppM.*(param.cs_i_ppP.*nnTnz + param.mu_fr_ppP.*nndvz);
face_flux_pp(:,11) = -tmpS.*param.cs_i_ppM.*param.rho_f_ppM./param.m_ppM.*( param.cs_i_ppP.*nnTnx + param.mu_fr_ppP.*nndvx );
face_flux_pp(:,12) = -tmpS.*param.cs_i_ppM.*param.rho_f_ppM./param.m_ppM.*( param.cs_i_ppP.*nnTny + param.mu_fr_ppP.*nndvy );
face_flux_pp(:,13) = -tmpS.*param.cs_i_ppM.*param.rho_f_ppM./param.m_ppM.*( param.cs_i_ppP.*nnTnz + param.mu_fr_ppP.*nndvz );

% assemble fast P-wave flux
tmp_fastP = param.cpI_i_ppM.*(param.d11_pp.*ndTn + param.d12_pp.*ndTfn+...
    param.d13_pp.*ndv  + param.d14_pp.*ndvf);

for fld1 = 1:param.Nfields
    face_flux_pp(:,fld1) = face_flux_pp(:,fld1) + tmp_fastP.*param.r1_p_pp_adj(:, fld1);
end

% assemble slow P-wave flux
tmp_slowP = param.cpII_i_ppM.*(param.d21_pp.*ndTn + param.d22_pp.*ndTfn+...
    param.d23_pp.*ndv  + param.d24_pp.*ndvf);

for fld1 = 1:param.Nfields
    face_flux_pp(:,fld1) = face_flux_pp(:,fld1) + tmp_slowP.*param.r4_p_pp_adj(:, fld1);
end